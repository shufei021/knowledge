import{_ as a,c as t,o as i,ae as r}from"./chunks/framework.BkDzuGyC.js";const p=JSON.parse('{"title":"vue 的 key","description":"","frontmatter":{},"headers":[],"relativePath":"guide/d/p5.md","filePath":"guide/d/p5.md"}'),d={name:"guide/d/p5.md"};function o(n,e,l,h,s,u){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="vue-的-key" tabindex="-1">vue 的 key <a class="header-anchor" href="#vue-的-key" aria-label="Permalink to &quot;vue 的 key&quot;">​</a></h1><p>Vue 的 key 是一个特殊的属性，用于给 <code>Vue 的虚拟 DOM Diff 算法</code> 提供唯一标识符。</p><h2 id="提高-diff-算法效率" tabindex="-1">提高 Diff 算法效率 <a class="header-anchor" href="#提高-diff-算法效率" aria-label="Permalink to &quot;提高 Diff 算法效率&quot;">​</a></h2><p>帮助 Vue 更高效地识别哪些元素发生了变化，从而最小化重渲染的范围。</p><h2 id="避免组件状态丢失" tabindex="-1">避免组件状态丢失 <a class="header-anchor" href="#避免组件状态丢失" aria-label="Permalink to &quot;避免组件状态丢失&quot;">​</a></h2><p>确保列表中的每个元素或组件都有唯一的标识符，避免由于列表顺序改变导致的状态错误复用。</p><h2 id="强制更新组件" tabindex="-1">强制更新组件 <a class="header-anchor" href="#强制更新组件" aria-label="Permalink to &quot;强制更新组件&quot;">​</a></h2><p>通过改变 key 的值，可以强制 Vue 销毁并重新创建组件实例，适用于需要重置组件状态的场景。</p><h2 id="为什么不要使用-index-作为-key" tabindex="-1">为什么不要使用 index 作为 key <a class="header-anchor" href="#为什么不要使用-index-作为-key" aria-label="Permalink to &quot;为什么不要使用 index 作为 key&quot;">​</a></h2><p>当列表项顺序发生变化时，使用 index 可能会导致性能问题和状态错乱。 推荐使用稳定且唯一的 ID 作为 key：比如数据库记录的 ID 或者其他唯一标识符。</p>',10)]))}const f=a(d,[["render",o]]);export{p as __pageData,f as default};
