import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.BkDzuGyC.js";const c=JSON.parse('{"title":"1px 问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/e/p3.md","filePath":"guide/e/p3.md"}'),l={name:"guide/e/p3.md"};function h(n,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_1px-问题" tabindex="-1">1px 问题 <a class="header-anchor" href="#_1px-问题" aria-label="Permalink to &quot;1px 问题&quot;">​</a></h1><blockquote><p>1px 问题的本质：是由于设备像素比（devicePixelRatio）大于 1，导致 1 个 CSS 像素对应多个物理像素，从而使得 1px 边框在高清屏幕上显示得更粗。</p></blockquote><h2 id="🧩-一、问题现象" tabindex="-1">🧩 一、问题现象 <a class="header-anchor" href="#🧩-一、问题现象" aria-label="Permalink to &quot;🧩 一、问题现象&quot;">​</a></h2><p>在一些高清设备（如 iPhone、iPad 等 Retina 屏幕设备）上，使用 CSS 设置的 <code>border: 1px solid #000</code> 或者 <code>box-shadow</code> 等 1px 样式时，实际显示的线条比预期更粗（看起来像 2px），这在视觉上显得不够精致。</p><h2 id="🧠-二、问题原理" tabindex="-1">🧠 二、问题原理 <a class="header-anchor" href="#🧠-二、问题原理" aria-label="Permalink to &quot;🧠 二、问题原理&quot;">​</a></h2><h3 id="_1-物理像素-vs-逻辑像素" tabindex="-1">1. 物理像素 vs 逻辑像素 <a class="header-anchor" href="#_1-物理像素-vs-逻辑像素" aria-label="Permalink to &quot;1. 物理像素 vs 逻辑像素&quot;">​</a></h3><ul><li><strong>物理像素（device pixel）</strong>：屏幕上的真实像素点。</li><li><strong>逻辑像素（CSS pixel）</strong>：浏览器中 CSS 使用的单位，是抽象的单位。</li></ul><p>在 Retina 屏幕等高清设备上，1 个 CSS 像素可能对应多个物理像素。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.devicePixelRatio </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能返回 2 或 3</span></span></code></pre></div><p>如果 <code>devicePixelRatio = 2</code>，那么 1px 的 CSS 像素实际上会占用 2x2 个物理像素。</p><h3 id="_2-为什么-1px-看起来粗" tabindex="-1">2. 为什么 1px 看起来粗？ <a class="header-anchor" href="#_2-为什么-1px-看起来粗" aria-label="Permalink to &quot;2. 为什么 1px 看起来粗？&quot;">​</a></h3><ul><li>浏览器在高清屏上渲染 1px 时，为了适应多个物理像素，可能会使用<strong>插值算法</strong>，导致线条模糊或变粗。</li><li>尤其是当设备像素比大于 1 时（如 2x、3x），这种现象更明显。</li></ul><h2 id="🛠️-三、解决方案" tabindex="-1">🛠️ 三、解决方案 <a class="header-anchor" href="#🛠️-三、解决方案" aria-label="Permalink to &quot;🛠️ 三、解决方案&quot;">​</a></h2><h3 id="✅-1-使用-transform-scaley-0-5-伪元素方式" tabindex="-1">✅ 1. 使用 <code>transform: scaleY(0.5)</code>（伪元素方式） <a class="header-anchor" href="#✅-1-使用-transform-scaley-0-5-伪元素方式" aria-label="Permalink to &quot;✅ 1. 使用 \`transform: scaleY(0.5)\`（伪元素方式）&quot;">​</a></h3><p>通过伪元素创建一个 1px 边框，并使用 <code>transform</code> 缩放。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.border::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>优点：兼容性好，适用于大多数设备。<br> 缺点：需要手动处理，不能直接使用 <code>border</code> 属性。</p></blockquote><h3 id="✅-2-使用-box-shadow" tabindex="-1">✅ 2. 使用 <code>box-shadow</code> <a class="header-anchor" href="#✅-2-使用-box-shadow" aria-label="Permalink to &quot;✅ 2. 使用 \`box-shadow\`&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>在某些设备上，<code>box-shadow</code> 渲染的 1px 更精细。</p></blockquote><h3 id="✅-3-使用-viewport-rem-动态适配-结合-flexible-js" tabindex="-1">✅ 3. 使用 <code>viewport</code> + <code>rem</code> 动态适配（结合 flexible.js） <a class="header-anchor" href="#✅-3-使用-viewport-rem-动态适配-结合-flexible-js" aria-label="Permalink to &quot;✅ 3. 使用 \`viewport\` + \`rem\` 动态适配（结合 flexible.js）&quot;">​</a></h3><p>使用 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noreferrer">flexible.js</a> 等库动态设置 <code>html</code> 的 <code>font-size</code> 和 <code>viewport</code>，从而实现适配。</p><blockquote><p>这种方案适用于响应式布局，但对 1px 问题的解决不如伪元素直接。</p></blockquote><h3 id="✅-4-使用-postcss-write-svg-插件-postcss" tabindex="-1">✅ 4. 使用 <code>postcss-write-svg</code> 插件（PostCSS） <a class="header-anchor" href="#✅-4-使用-postcss-write-svg-插件-postcss" aria-label="Permalink to &quot;✅ 4. 使用 \`postcss-write-svg\` 插件（PostCSS）&quot;">​</a></h3><p>通过 PostCSS 插件自动将 1px 边框转换为 SVG 背景图。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>会被编译为：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; height=&#39;1px&#39; ... &gt;&lt;/svg&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>优点：自动化，适合工程化项目。<br> 缺点：需要构建工具支持。</p></blockquote><h3 id="✅-5-使用-devicepixelratio-动态判断-javascript-方案" tabindex="-1">✅ 5. 使用 <code>devicePixelRatio</code> 动态判断（JavaScript 方案） <a class="header-anchor" href="#✅-5-使用-devicepixelratio-动态判断-javascript-方案" aria-label="Permalink to &quot;✅ 5. 使用 \`devicePixelRatio\` 动态判断（JavaScript 方案）&quot;">​</a></h3><p>可以使用 JavaScript 判断设备像素比，动态设置样式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.devicePixelRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).style.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.5px solid #000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>注意：不是所有浏览器都支持小数像素（如某些安卓浏览器不支持 <code>0.5px</code>）。</p></blockquote><h2 id="📌-四、总结" tabindex="-1">📌 四、总结 <a class="header-anchor" href="#📌-四、总结" aria-label="Permalink to &quot;📌 四、总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><code>transform: scaleY(0.5)</code></td><td>简单有效</td><td>需要伪元素</td><td>移动端通用</td></tr><tr><td><code>box-shadow</code></td><td>简洁</td><td>效果不稳定</td><td>简单边框</td></tr><tr><td><code>flexible.js</code></td><td>整体适配</td><td>需引入库</td><td>大型响应式项目</td></tr><tr><td><code>postcss-write-svg</code></td><td>自动化</td><td>需构建工具</td><td>工程化项目</td></tr><tr><td><code>0.5px</code></td><td>简单</td><td>兼容性差</td><td>支持小数像素的设备</td></tr></tbody></table>`,35)]))}const E=i(l,[["render",h]]);export{c as __pageData,E as default};
