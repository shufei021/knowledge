import{_ as l,c as i,o,ae as t}from"./chunks/framework.BkDzuGyC.js";const h=JSON.parse('{"title":"Vue 组件通信方式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/d/p3.md","filePath":"guide/d/p3.md"}'),a={name:"guide/d/p3.md"};function r(d,e,u,n,c,s){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="vue-组件通信方式" tabindex="-1">Vue 组件通信方式 <a class="header-anchor" href="#vue-组件通信方式" aria-label="Permalink to &quot;Vue 组件通信方式&quot;">​</a></h1><h2 id="父子组件通信" tabindex="-1">父子组件通信 <a class="header-anchor" href="#父子组件通信" aria-label="Permalink to &quot;父子组件通信&quot;">​</a></h2><ul><li><p><strong>Props + Events</strong></p><ul><li>父 → 子：通过 <code>props</code> 传递数据</li><li>子 → 父：通过 <code>$emit</code> 触发事件</li><li>原则：遵循单向数据流</li></ul></li><li><p><strong>v-model</strong></p><ul><li>语法糖：<code>modelValue</code> prop + <code>update:modelValue</code> 事件</li><li>Vue 3 支持多个 v-model</li></ul></li><li><p><strong>Ref</strong></p><ul><li>父组件通过 <code>ref</code> 访问子组件实例方法/数据</li></ul></li></ul><h2 id="跨层级通信" tabindex="-1">跨层级通信 <a class="header-anchor" href="#跨层级通信" aria-label="Permalink to &quot;跨层级通信&quot;">​</a></h2><ul><li><p><strong>Provide/Inject</strong></p><ul><li>祖先 → 后代：<code>provide</code> 提供数据，<code>inject</code> 注入</li><li>Vue 3 需手动保持响应式（提供 <code>ref</code>/<code>reactive</code>）</li></ul></li><li><p><strong>事件总线</strong></p><ul><li>Vue 2: 新建 Vue 实例作为 EventBus</li><li>Vue 3: 推荐使用 <a href="https://github.com/developit/mitt" target="_blank" rel="noreferrer">mitt</a> 库</li></ul></li></ul><h2 id="全局状态管理" tabindex="-1">全局状态管理 <a class="header-anchor" href="#全局状态管理" aria-label="Permalink to &quot;全局状态管理&quot;">​</a></h2><ul><li><p><strong>Pinia</strong> (推荐)</p><ul><li>Vue 3 官方推荐的状态管理库</li><li>支持 TypeScript 和 Composition API</li></ul></li><li><p><strong>Vuex</strong></p><ul><li>Vue 2 的标准方案</li><li>Vue 3 仍兼容但不再推荐</li></ul></li></ul><h2 id="特殊场景方案" tabindex="-1">特殊场景方案 <a class="header-anchor" href="#特殊场景方案" aria-label="Permalink to &quot;特殊场景方案&quot;">​</a></h2><ul><li><p><strong>共享父组件状态</strong></p><ul><li>通过 <code>$parent</code> 访问（不推荐，破坏封装性）</li><li>更好的方案：提升状态到父组件 + props 传递</li></ul></li><li><p><strong>本地存储通信</strong></p><ul><li>通过 <code>localStorage</code> + <code>storage</code> 事件实现跨标签页通信</li></ul></li></ul>',9)]))}const g=l(a,[["render",r]]);export{h as __pageData,g as default};
