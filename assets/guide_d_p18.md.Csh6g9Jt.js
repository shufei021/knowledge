import{_ as o,c as t,o as r,ae as c}from"./chunks/framework.BkDzuGyC.js";const f=JSON.parse('{"title":"vue 的响应式原理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/d/p18.md","filePath":"guide/d/p18.md"}'),d={name:"guide/d/p18.md"};function a(i,e,n,s,l,u){return r(),t("div",null,e[0]||(e[0]=[c('<h1 id="vue-的响应式原理" tabindex="-1">vue 的响应式原理 <a class="header-anchor" href="#vue-的响应式原理" aria-label="Permalink to &quot;vue 的响应式原理&quot;">​</a></h1><details class="details custom-block" open=""><summary>Details</summary><p>Vue 的响应式原理是通过<code>劫持数据访问</code>（Vue 2 使用 <code>Object.defineProperty</code>，Vue 3 使用 <code>Proxy</code>），</p><p>结合<code>依赖收集</code>与<code>发布订阅机制</code>，实现<code>数据变化</code>自动<code>触发视图更新</code>。</p></details><h3 id="✅-vue-2-的响应式原理-基于-object-defineproperty" tabindex="-1">✅ Vue 2 的响应式原理（基于 <code>Object.defineProperty</code>）： <a class="header-anchor" href="#✅-vue-2-的响应式原理-基于-object-defineproperty" aria-label="Permalink to &quot;✅ Vue 2 的响应式原理（基于 `Object.defineProperty`）：&quot;">​</a></h3><p>Vue 在初始化时，通过 <code>Object.defineProperty</code> 对数据对象的属性进行劫持，将其转换为 <strong>getter/setter</strong> 形式：</p><ul><li><strong>getter</strong>：在依赖收集阶段，将当前 <code>Watcher</code>（观察者）添加到该属性的依赖列表中。</li><li><strong>setter</strong>：当数据更新时，触发依赖通知，通知所有订阅者（<code>Dep.notify()</code>），执行更新函数（如更新视图）。</li></ul><p>Vue 内部通过 <strong>依赖收集（Dependency Collection）</strong> 和 <strong>发布-订阅（PubSub）机制</strong> 实现响应式更新。</p><h3 id="✅-vue-3-的响应式原理-基于-proxy-reflect" tabindex="-1">✅ Vue 3 的响应式原理（基于 <code>Proxy</code> + <code>Reflect</code>）： <a class="header-anchor" href="#✅-vue-3-的响应式原理-基于-proxy-reflect" aria-label="Permalink to &quot;✅ Vue 3 的响应式原理（基于 `Proxy` + `Reflect`）：&quot;">​</a></h3><p>Vue 3 使用 <code>Proxy</code> 对整个对象进行代理，相比 Vue 2 更加彻底和高效：</p><ul><li><code>Proxy</code> 可以监听对象的新增/删除属性、数组变化等，无需像 Vue 2 那样单独处理数组变异方法。</li><li>同样通过 <strong>依赖收集</strong> 和 <strong>发布-订阅机制</strong>，在数据变更时触发副作用（如视图更新）。</li><li>通过 <code>effect</code> 和 <code>track</code> / <code>trigger</code> 实现响应式依赖的追踪与更新。</li></ul><p>Vue 3 的响应式系统基于 <code>reactivity</code> 模块，是独立可复用的响应式系统，不依赖于 Vue 框架本身。</p>',10)]))}const g=o(d,[["render",a]]);export{f as __pageData,g as default};
