import{_ as e,c as l,o as i,ae as a}from"./chunks/framework.BkDzuGyC.js";const u=JSON.parse('{"title":"模块化 和CommonJs","description":"","frontmatter":{},"headers":[],"relativePath":"guide/c/p4.md","filePath":"guide/c/p4.md"}'),r={name:"guide/c/p4.md"};function t(d,o,c,n,s,m){return i(),l("div",null,o[0]||(o[0]=[a('<h1 id="模块化-和commonjs" tabindex="-1">模块化 和CommonJs <a class="header-anchor" href="#模块化-和commonjs" aria-label="Permalink to &quot;模块化 和CommonJs&quot;">​</a></h1><p><strong>模块化是把代码划分独立的、可复用部分的一种编程范式，它的目的是：</strong></p><ol><li>解耦：减少模块会直接的依赖</li><li>可维护性：便于调式和更新</li><li>复用性：可以在多个项目中重复使用</li></ol><p><strong>CommonJS 是一种模块化规范，最初为了解决NodeJs中模块问题提出的，特点：</strong></p><ol><li>使用require（）同步加载模块</li><li>使用module.exports和exports导出模块</li><li>主要用于服务端NodeJS</li></ol><p><strong>ES Module （ESM）</strong></p><ol><li>使用import和export</li><li>支持异步加载</li><li>静态分析能力强，适合tree shaking</li></ol><h2 id="commonjs-与-esm-的区别" tabindex="-1">CommonJS 与 ESM 的区别 <a class="header-anchor" href="#commonjs-与-esm-的区别" aria-label="Permalink to &quot;CommonJS 与 ESM 的区别&quot;">​</a></h2><h3 id="一、语法差异" tabindex="-1">一、语法差异 <a class="header-anchor" href="#一、语法差异" aria-label="Permalink to &quot;一、语法差异&quot;">​</a></h3><ul><li><p><code>CommonJS</code></p><ol><li>使用<code>require（）</code>同步加载模块</li><li>使用<code>module.exports</code>和<code>exports</code>导出模块</li><li>主要用于服务端<code>NodeJS</code></li></ol></li><li><p><code>ES Module</code></p><ol><li>使用<code>import</code>和<code>export</code></li><li>支持异步加载</li><li>静态分析能力强，适合<code>tree shaking</code></li></ol></li></ul><h3 id="二、加载时机" tabindex="-1">二、加载时机 <a class="header-anchor" href="#二、加载时机" aria-label="Permalink to &quot;二、加载时机&quot;">​</a></h3><ul><li><code>CommonJS</code>: 模块是在<code>运行时加载</code>的，这意味着你可以根据条件动态地决定要加载哪些模块。条件判断 require 那个模块</li><li><code>ESM</code>: 模块在<code>编译时确定依赖关系</code>，因此具有更严格的依赖图谱，并且不允许动态导入模块路径，import 后 形成严格的依赖，就不允许修改模块路径</li></ul><h3 id="三、适合环境" tabindex="-1">三、适合环境 <a class="header-anchor" href="#三、适合环境" aria-label="Permalink to &quot;三、适合环境&quot;">​</a></h3><ul><li>CommonJS: NodeJS</li><li>ESM 是JavaScript标准的一部分，现在也被现代浏览器和Node.js支持。随着标准化进程，它逐渐成为前端和后端开发中的主流选择。</li></ul><h3 id="四、-性能考虑" tabindex="-1">四、 性能考虑 <a class="header-anchor" href="#四、-性能考虑" aria-label="Permalink to &quot;四、 性能考虑&quot;">​</a></h3><ul><li>ESM由于其静态结构，可以进行更多优化，比如Tree-shaking（消除未使用的代码），这对于构建高效的应用程序非常重要。</li></ul><h3 id="五、默认导出与命名导出" tabindex="-1">五、默认导出与命名导出 <a class="header-anchor" href="#五、默认导出与命名导出" aria-label="Permalink to &quot;五、默认导出与命名导出&quot;">​</a></h3><ul><li>CommonJS: 主要是默认导出的概念，尽管也可以通过向exports添加多个属性实现类似命名导出的功能。</li><li>ESM: 明确区分了默认导出(<code>export default</code>)和命名导出(<code>export const</code> ...等)，提供了更大的灵活性。</li></ul>',18)]))}const p=e(r,[["render",t]]);export{u as __pageData,p as default};
