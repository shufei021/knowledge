import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.BkDzuGyC.js";const c=JSON.parse('{"title":"前端缓存","description":"","frontmatter":{},"headers":[],"relativePath":"guide/b/p1.md","filePath":"guide/b/p1.md"}'),n={name:"guide/b/p1.md"};function l(h,s,p,d,o,r){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="前端缓存" tabindex="-1">前端缓存 <a class="header-anchor" href="#前端缓存" aria-label="Permalink to &quot;前端缓存&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>前端缓存是 指浏览器通过存储资源（如 HTML、CSS、JS、图片等）来减少重复请求、加快页面加载速度的一种机制。合理使用缓存可以显著提升用户体验并降低服务器压力。前端缓存分为http缓存 和本地缓存</p><h2 id="http缓存-有强缓存-和-协商缓存" tabindex="-1">http缓存: 有强缓存 和 协商缓存 <a class="header-anchor" href="#http缓存-有强缓存-和-协商缓存" aria-label="Permalink to &quot;http缓存: 有强缓存 和 协商缓存&quot;">​</a></h2><ul><li><p>强缓存：Expiress：xx 和 Cache-control：max-age：xx，Expires 由于依赖用户的本地时间已经被废弃</p></li><li><p>协商缓存：Last-Modfied / If-Modfied-Since（弊端有2：文件修改时间是秒。毫秒级无感、文件内容不动，文件名改了再改回去也不会返回缓存）、ETag/If-None-Match</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 协商缓存先决条件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cache-control：no-cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 或</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cache-control：max-age:0,must-revalidate</span></span></code></pre></div><h4 id="缓存流程图-浏览器视角" tabindex="-1">缓存流程图（浏览器视角） <a class="header-anchor" href="#缓存流程图-浏览器视角" aria-label="Permalink to &quot;缓存流程图（浏览器视角）&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">是否有强缓存？</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ↓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 是</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">使用缓存（200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory/disk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ↓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 否</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">发送请求到服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ↓</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">服务器检查协商缓存（If-Modified-Since</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> If-None-Match）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ↓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 匹配成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">返回</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 304，使用缓存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ↓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 不匹配</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">返回</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和新资源</span></span></code></pre></div><p>强缓存优先级更高，只有当它失效后才会走协商缓存。</p><h4 id="常见组合使用方式" tabindex="-1">常见组合使用方式 <a class="header-anchor" href="#常见组合使用方式" aria-label="Permalink to &quot;常见组合使用方式&quot;">​</a></h4><table tabindex="0"><thead><tr><th>强缓存策略</th><th>使用字段</th></tr></thead><tbody><tr><td>缓存策略</td><td>使用字段</td></tr><tr><td>强缓存优先</td><td>Cache-Control: max-age=xxx</td></tr><tr><td>强缓存 + 协商缓存</td><td>Cache-Control: no-cache + ETag / Last-Modified</td></tr><tr><td>禁止缓存</td><td>Cache-Control: no-store</td></tr><tr><td>CDN 缓存</td><td>Cache-Control: public, max-age=xxx</td></tr></tbody></table><h2 id="本地缓存-sessionstorage、localstorage、indexdb、cookie" tabindex="-1">本地缓存：sessionStorage、localStorage、IndexDB、cookie <a class="header-anchor" href="#本地缓存-sessionstorage、localstorage、indexdb、cookie" aria-label="Permalink to &quot;本地缓存：sessionStorage、localStorage、IndexDB、cookie&quot;">​</a></h2><ul><li><code>sessionStorage</code>：会话缓存，窗口关闭，缓存随机销毁，大小一般再5M</li><li><code>localStorage</code>：域名下的持久缓存，不主动删除就一直存在，封装需要过期机制，大小一般再5M</li><li><code>IndexDB</code>：非关系性数据库，缓存大数据较好</li><li><code>cookie</code>：缓存较小，一般是5k左右，常用缓存用户信息</li></ul>`,13)]))}const F=a(n,[["render",l]]);export{c as __pageData,F as default};
