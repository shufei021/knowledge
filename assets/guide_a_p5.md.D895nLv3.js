import{_ as o,c as a,o as t,ae as d}from"./chunks/framework.BkDzuGyC.js";const u=JSON.parse('{"title":"options 预检机制","description":"","frontmatter":{},"headers":[],"relativePath":"guide/a/p5.md","filePath":"guide/a/p5.md"}'),c={name:"guide/a/p5.md"};function i(l,e,r,n,s,h){return t(),a("div",null,e[0]||(e[0]=[d('<h1 id="options-预检机制" tabindex="-1">options 预检机制 <a class="header-anchor" href="#options-预检机制" aria-label="Permalink to &quot;options 预检机制&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>OPTIONS 请求是 <code>浏览器在发送某些跨域请求之前</code>，<code>自动</code>发起的一个“探路”请求， 用于确认服务器是否允许该跨域请求，这就是 CORS 中的预检机制（Preflight）。</p><h2 id="触发条件" tabindex="-1">触发条件 <a class="header-anchor" href="#触发条件" aria-label="Permalink to &quot;触发条件&quot;">​</a></h2><ul><li>使用了除 <code>GET</code>、<code>HEAD</code>、<code>POST</code> 以外的方法</li><li>设置了自定义请求头，如 <code>Authorization</code>、<code>X-Requested-With</code> 等</li><li>设置了 Content-Type 不是以下三种之一,<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><ul><li>浏览器向目标服务器发送一个 OPTIONS 请求，请求头中包含，<code>Origin</code>、<code>Access-Control-Request</code>-Method、<code>Access-Control-Request</code>-Headers</li><li>服务器根据这些信息决定是否允许请求，并返回相应的响应头，<code>Access-Control-Allow</code>-Origin、<code>Access-Control-Allow</code>-Methods、<code>Access-Control-Allow</code>-Headers</li><li>如果服务器允许，则浏览器继续发送真正的请求；否则，阻止请求并报错</li></ul>',7)]))}const _=o(c,[["render",i]]);export{u as __pageData,_ as default};
