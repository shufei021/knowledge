import{_ as i,c as e,o,ae as a}from"./chunks/framework.BkDzuGyC.js";const g=JSON.parse('{"title":"浏览器输入 URL 到渲染过程","description":"","frontmatter":{},"headers":[],"relativePath":"guide/a/p7.md","filePath":"guide/a/p7.md"}'),t={name:"guide/a/p7.md"};function r(d,l,c,n,u,s){return o(),e("div",null,l[0]||(l[0]=[a('<h1 id="浏览器输入-url-到渲染过程" tabindex="-1">浏览器输入 URL 到渲染过程 <a class="header-anchor" href="#浏览器输入-url-到渲染过程" aria-label="Permalink to &quot;浏览器输入 URL 到渲染过程&quot;">​</a></h1><h2 id="一、输入-url" tabindex="-1">一、输入 URL <a class="header-anchor" href="#一、输入-url" aria-label="Permalink to &quot;一、输入 URL&quot;">​</a></h2><ul><li>输入 URL，按下 Enter 键。</li><li>浏览器检查是否为搜索关键词。</li><li>如果 URL 不完整，则跳转到默认的搜索引擎。</li></ul><h2 id="二、解析-url" tabindex="-1">二、解析 URL <a class="header-anchor" href="#二、解析-url" aria-label="Permalink to &quot;二、解析 URL&quot;">​</a></h2><ul><li>提取出协议（如 <code>http</code>、<code>https</code>）、域名、端口和路径等信息。</li></ul><h2 id="三、dns-解析-域名解析" tabindex="-1">三、DNS 解析（域名解析） <a class="header-anchor" href="#三、dns-解析-域名解析" aria-label="Permalink to &quot;三、DNS 解析（域名解析）&quot;">​</a></h2><ol><li>按照以下顺序依次查询缓存： <ul><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>ISP DNS 服务器缓存</li></ul></li><li>如果都未命中，则通过递归和迭代方式向根域名、顶级域名、权威域名服务器请求 IP 地址。</li><li>最终找到 IP 并更新各级缓存。</li></ol><h4 id="优化点" tabindex="-1">优化点： <a class="header-anchor" href="#优化点" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>使用 <code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code> 和 <code>&lt;link rel=&quot;preconnect&quot;&gt;</code> 预先提取解析 DNS 并建立连接。</li></ul><h2 id="四、tcp-连接" tabindex="-1">四、TCP 连接 <a class="header-anchor" href="#四、tcp-连接" aria-label="Permalink to &quot;四、TCP 连接&quot;">​</a></h2><ul><li><p><strong>三次握手</strong>：</p><ol><li>客户端 → 服务端：发送 <code>SYN</code> 请求建立连接。</li><li>服务端 → 客户端：发送 <code>SYN-ACK</code> 表示收到并同意建立连接。</li><li>客户端 → 服务端：发送 <code>ACK</code> 确认连接建立。</li></ol></li><li><p><strong>TLS 握手（HTTPS）</strong>：</p><ol><li>客户端 → 服务端：发送随机数、加密套件列表、TLS 版本。</li><li>服务端 → 客户端：发送随机数、选择的加密套件、含公钥的证书。</li><li>客户端生成主密钥，使用公钥加密后发送给服务端。</li><li>双方生成会话密钥，后续通信使用对称加密。</li></ol></li></ul><h2 id="五、发起请求" tabindex="-1">五、发起请求 <a class="header-anchor" href="#五、发起请求" aria-label="Permalink to &quot;五、发起请求&quot;">​</a></h2><ul><li>发送请求报文，包括： <ul><li>请求行（如 GET /index.html HTTP/1.1）</li><li>请求头（如 Host、User-Agent）</li><li>请求体（可选）</li></ul></li></ul><h2 id="六、接收请求并响应" tabindex="-1">六、接收请求并响应 <a class="header-anchor" href="#六、接收请求并响应" aria-label="Permalink to &quot;六、接收请求并响应&quot;">​</a></h2><ul><li><p><strong>CDN 分发</strong>：请求可能被分发到就近 CDN 节点服务器。</p></li><li><p><strong>缓存检查</strong>：</p><ul><li>强缓存：<code>Cache-Control: max-age=xxx</code>，直接返回 <code>200</code></li><li>协商缓存： <ul><li><code>Last-Modified</code> / <code>If-Modified-Since</code></li><li><code>ETag</code> / <code>If-None-Match</code></li><li>若未修改则返回 <code>304 Not Modified</code></li></ul></li></ul></li><li><p><strong>重定向</strong>：</p><ul><li><code>301</code> 永久重定向：下次不再走重定向</li><li><code>302</code> 临时重定向：每次请求都会走重定向</li></ul></li><li><p><strong>业务逻辑处理</strong>：</p><ul><li>查询数据库</li><li>模板渲染（SSR）</li><li>返回响应报文（状态码、响应头、响应体）</li></ul></li></ul><h4 id="优化点-1" tabindex="-1">优化点： <a class="header-anchor" href="#优化点-1" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>尽量避免重定向，减少网络往返时间。</li><li>合理设置缓存以加快页面加载速度。</li><li>使用 CDN 加速资源加载。</li></ul><h2 id="七、接收响应并解析" tabindex="-1">七、接收响应并解析 <a class="header-anchor" href="#七、接收响应并解析" aria-label="Permalink to &quot;七、接收响应并解析&quot;">​</a></h2><ul><li><strong>HTML 解析</strong>：构建 DOM 树。</li><li><strong>CSS 解析</strong>：构建 CSSOM 树。 <ul><li>JS 加载可能会阻塞 CSSOM 构建，进而阻塞页面渲染。</li><li>可使用 <code>async</code> 或 <code>defer</code> 属性解决。</li></ul></li><li><strong>合并 DOM 和 CSSOM</strong>：生成 Render Tree。</li><li><strong>布局（Layout）</strong>：计算元素大小和位置。</li><li><strong>绘制（Paint）</strong>：将像素绘制到屏幕上。</li><li><strong>合成（Composite）</strong>：多个图层合并，提升渲染性能。</li></ul><h2 id="八、加载子资源" tabindex="-1">八、加载子资源 <a class="header-anchor" href="#八、加载子资源" aria-label="Permalink to &quot;八、加载子资源&quot;">​</a></h2><ul><li>HTML 解析过程中可能触发 JS、CSS、图片等资源请求。</li><li>可能引起页面“重绘（Repaint）”和“回流（Reflow）”。</li></ul><h4 id="优化点-2" tabindex="-1">优化点： <a class="header-anchor" href="#优化点-2" aria-label="Permalink to &quot;优化点：&quot;">​</a></h4><ul><li>将 JS 放在 <code>&lt;body&gt;</code> 底部，避免阻塞渲染。</li><li>给 JS 添加 <code>async</code> 或 <code>defer</code> 属性，defer 按顺序执行，async 是异步无序执行，适用于不依赖页面 DOM 的脚本。</li><li>减少 DOM 嵌套层级，提高查找效率。</li><li>对关键资源使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 预加载。</li><li>使用 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 和 <code>&lt;link rel=&quot;preconnect&quot;&gt;</code> 提前请求和建立连接。</li><li>图片压缩与懒加载。</li><li>使用 SSR（服务端渲染）或 SSG（静态生成）。</li><li>使用 HTTP/2 或 HTTP/3 提升性能（多路复用、头部压缩等），多路复用解决了 HOL blocking，头部压缩减少传输体积。</li><li>使用内联CSS，减少 HTTP 请求。</li></ul><h2 id="九、页面加载完成" tabindex="-1">九、页面加载完成 <a class="header-anchor" href="#九、页面加载完成" aria-label="Permalink to &quot;九、页面加载完成&quot;">​</a></h2><ul><li>触发 <code>window.onload</code> 事件。</li></ul><h2 id="十、断开连接" tabindex="-1">十、断开连接 <a class="header-anchor" href="#十、断开连接" aria-label="Permalink to &quot;十、断开连接&quot;">​</a></h2><ul><li><strong>四次挥手</strong>： <ol><li>客户端 → 服务端：发送 <code>FIN</code> 请求断开连接。</li><li>服务端 → 客户端：发送 <code>ACK</code> 确认。</li><li>服务端 → 客户端：发送 <code>FIN</code> 请求断开连接。</li><li>客户端 → 服务端：发送 <code>ACK</code> 确认。</li></ol></li><li>等待 2MSL（最大报文段生存时间），确保最后一个 ACK 被接收，连接正式断开。</li></ul>',27)]))}const S=i(t,[["render",r]]);export{g as __pageData,S as default};
