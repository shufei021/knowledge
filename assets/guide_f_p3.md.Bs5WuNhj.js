import{_ as e,c as l,o as i,ae as t}from"./chunks/framework.BkDzuGyC.js";const p=JSON.parse('{"title":"webpack 和 vite 区别","description":"","frontmatter":{},"headers":[],"relativePath":"guide/f/p3.md","filePath":"guide/f/p3.md"}'),r={name:"guide/f/p3.md"};function o(c,a,u,h,s,d){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="webpack-和-vite-区别" tabindex="-1">webpack 和 vite 区别 <a class="header-anchor" href="#webpack-和-vite-区别" aria-label="Permalink to &quot;webpack 和 vite 区别&quot;">​</a></h1><h2 id="一、启动速度" tabindex="-1">一、启动速度 <a class="header-anchor" href="#一、启动速度" aria-label="Permalink to &quot;一、启动速度&quot;">​</a></h2><ul><li>webpack较慢，需要打包所有文件</li><li>vite极快，利用浏览器的原生ESM，按需加载</li></ul><h2 id="二、生产构建" tabindex="-1">二、生产构建 <a class="header-anchor" href="#二、生产构建" aria-label="Permalink to &quot;二、生产构建&quot;">​</a></h2><ul><li>webpack ：使用 webpack 打包输出优化后的bundle</li><li>vite： 使用 Rollup 进行生产环境打包</li></ul><h2 id="三、开发模式" tabindex="-1">三、开发模式 <a class="header-anchor" href="#三、开发模式" aria-label="Permalink to &quot;三、开发模式&quot;">​</a></h2><ul><li>webpack：编译后提供本地服务</li><li>vite：利用浏览器原生支持ES Modules</li></ul><h2 id="四、配置复杂度" tabindex="-1">四、配置复杂度 <a class="header-anchor" href="#四、配置复杂度" aria-label="Permalink to &quot;四、配置复杂度&quot;">​</a></h2><ul><li>webpack：复杂，依赖大量插件</li><li>vite：简洁，大部分默认配置已满足需求</li></ul><h2 id="五、热更新" tabindex="-1">五、热更新 <a class="header-anchor" href="#五、热更新" aria-label="Permalink to &quot;五、热更新&quot;">​</a></h2><ul><li>webpack：支持，但较慢</li><li>vite：支持，响应速度快</li></ul><h2 id="六、插件系统" tabindex="-1">六、插件系统 <a class="header-anchor" href="#六、插件系统" aria-label="Permalink to &quot;六、插件系统&quot;">​</a></h2><ul><li>webpack：基于 webapck 插件生态庞大、</li><li>vite 基于 Rollup 插件系统（逐渐成熟）</li></ul><h2 id="七、支持框架" tabindex="-1">七、支持框架 <a class="header-anchor" href="#七、支持框架" aria-label="Permalink to &quot;七、支持框架&quot;">​</a></h2><ul><li>webpack 支持React、vue、Angular</li><li>vite 支持Vue3、React、Svelte等现代框架</li></ul><h2 id="八、预处理器" tabindex="-1">八、预处理器 <a class="header-anchor" href="#八、预处理器" aria-label="Permalink to &quot;八、预处理器&quot;">​</a></h2><ul><li>webpack：需要手动配置loader（如sass-loader）</li><li>vite：内置支持 .scss,.less,.styl等</li></ul><h2 id="九、typescript" tabindex="-1">九、TypeScript <a class="header-anchor" href="#九、typescript" aria-label="Permalink to &quot;九、TypeScript&quot;">​</a></h2><ul><li>webpack 需要ts-loader或babel-loader</li><li>vite默认支持 .ts 文件</li></ul><h2 id="十、jsx-vue-sfc" tabindex="-1">十、JSX/ vue SFC <a class="header-anchor" href="#十、jsx-vue-sfc" aria-label="Permalink to &quot;十、JSX/ vue SFC&quot;">​</a></h2><ul><li>webpack 需要配置Babel / vue-loader</li><li>vite：默认支持</li></ul><h2 id="适用场景建议" tabindex="-1">适用场景建议 <a class="header-anchor" href="#适用场景建议" aria-label="Permalink to &quot;适用场景建议&quot;">​</a></h2><p>Webpack 更适合传统大型项目（如 Angular、企业级应用）、需要高度定制打包流程的场景。 Vite 更适合现代前端项目（如 Vue 3、React 18、Svelte）、需要快速开发体验、轻量级构建的项目。</p><p><em>如果你是开发一个现代前端项目，推荐优先使用 Vite，它不仅开发体验更好，而且性能和生态也在快速追赶 Webpack</em></p>',24)]))}const b=e(r,[["render",o]]);export{p as __pageData,b as default};
