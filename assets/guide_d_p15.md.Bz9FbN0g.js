import{_ as s,c as i,o as a,ae as t}from"./chunks/framework.BkDzuGyC.js";const k=JSON.parse('{"title":"ref 和 reactive 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"guide/d/p15.md","filePath":"guide/d/p15.md"}'),o={name:"guide/d/p15.md"};function l(n,e,r,c,d,p){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="ref-和-reactive-的区别" tabindex="-1">ref 和 reactive 的区别 <a class="header-anchor" href="#ref-和-reactive-的区别" aria-label="Permalink to &quot;ref 和 reactive 的区别&quot;">​</a></h1><details class="details custom-block" open=""><summary>Details</summary><p><code>ref</code> 用于创建单一值的响应式引用，需通过 <code>.value</code> 操作；</p><p><code>reactive</code> 则用于<code>创建复杂对象的响应式代理</code>，<code>直接操作属性</code>即可。</p></details><p>在 Vue 3 中，<code>ref</code> 和 <code>reactive</code> 是 Composition API 提供的两个核心响应式函数，它们用于创建不同类型的响应式数据。</p><h4 id="ref" tabindex="-1"><code>ref</code> <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;\`ref\`&quot;">​</a></h4><ul><li><p><strong>定义</strong>：<code>ref</code> 用于创建一个包含值的响应式引用对象。这个引用对象是一个容器，它有一个 <code>.value</code> 属性来存取实际的值。</p></li><li><p><strong>适用场景</strong>：适用于基本类型数据（如字符串、数字等）或需要跨组件层级传递的数据。由于 <code>ref</code> 返回的是一个对象，因此它可以很好地处理 JavaScript 的值传递机制，尤其是在函数参数和返回值中使用时。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="reactive" tabindex="-1"><code>reactive</code> <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;\`reactive\`&quot;">​</a></h4><ul><li><p><strong>定义</strong>：<code>reactive</code> 接受一个普通对象然后返回该普通对象的响应式代理。本质上是对对象进行深度监听，使对象中的所有属性都成为响应式的。</p></li><li><p><strong>适用场景</strong>：最适合于复杂的数据结构，比如对象或者数组。当你需要对整个对象进行响应式追踪而不是单一值时，<code>reactive</code> 是更合适的选择。</p></li><li><p><strong>用法示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="主要区别" tabindex="-1">主要区别 <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别&quot;">​</a></h4><ol><li><p><strong>数据类型</strong>：<code>ref</code> 可以用来包装任何类型的值，包括原始类型和对象；而 <code>reactive</code> 主要用于对象（包括数组和集合），不能直接应用于原始类型。</p></li><li><p><strong>访问方式</strong>：<code>ref</code> 创建的数据需要通过 <code>.value</code> 来访问或修改其值；而 <code>reactive</code> 直接操作对象属性即可，不需要额外的语法。</p></li><li><p><strong>解构与传播</strong>：解构 <code>reactive</code> 对象不会保持响应性，而 <code>ref</code> 在某些情况下可以通过解构保持响应性（例如在 <code>&lt;script setup&gt;</code> 中自动解开）。此外，<code>ref</code> 可以作为 prop 传递并在子组件中使用 <code>.value</code> 访问，这使得它非常适合用于组件间通信。</p></li><li><p><strong>性能考虑</strong>：由于 <code>reactive</code> 对对象的所有嵌套层次进行深度监听，可能会带来一定的性能开销；相比之下，<code>ref</code> 只监听顶层的值变化，可能在特定场景下提供更好的性能表现。</p></li></ol><p>理解何时使用 <code>ref</code> 和 <code>reactive</code> 是掌握 Vue 3 Composition API 的关键之一。根据你的具体需求选择合适的工具可以让你的应用更加高效且易于维护。</p><h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>在 Vue 3 中，<code>ref</code> 和 <code>reactive</code> 是 Composition API 的两个重要函数，用于创建响应式数据。它们的底层实现基于 ES6 的 <code>Proxy</code> 对象，但各自有不同的机制来实现响应式行为。</p><h4 id="reactive-的底层实现原理" tabindex="-1"><code>reactive</code> 的底层实现原理 <a class="header-anchor" href="#reactive-的底层实现原理" aria-label="Permalink to &quot;\`reactive\` 的底层实现原理&quot;">​</a></h4><ul><li><p><strong>Proxy 对象</strong>：<code>reactive</code> 函数通过将传入的对象转换为一个 <code>Proxy</code> 对象来实现响应式。<code>Proxy</code> 可以拦截对对象的基本操作（如获取属性、设置属性等），这使得 Vue 能够追踪依赖并在状态改变时通知相关的视图进行更新。</p></li><li><p><strong>深度响应</strong>：使用 <code>reactive</code> 创建的对象是深度响应式的，这意味着它会递归地将所有嵌套的对象都转换为 <code>Proxy</code> 对象，确保任何层级的变化都能被检测到并触发更新。</p></li><li><p><strong>陷阱（Traps）</strong>：<code>Proxy</code> 使用了多种陷阱（如 <code>get</code>, <code>set</code>, <code>deleteProperty</code> 等）来定义当执行这些操作时的行为。例如，在 <code>get</code> 操作中收集依赖，在 <code>set</code> 操作中触发更新。</p></li></ul><h5 id="ref-的底层实现原理" tabindex="-1"><code>ref</code> 的底层实现原理 <a class="header-anchor" href="#ref-的底层实现原理" aria-label="Permalink to &quot;\`ref\` 的底层实现原理&quot;">​</a></h5><ul><li><p><strong>封装基本值</strong>：与 <code>reactive</code> 不同，<code>ref</code> 主要用于包装基本数据类型（虽然也可以包装对象）。它返回的是一个包含 <code>.value</code> 属性的对象，这个对象本身不是响应式的，但其 <code>.value</code> 属性是响应式的。</p></li><li><p><strong>触发更新</strong>：当你修改 <code>ref</code> 包装的值（即修改 <code>.value</code> 属性）时，Vue 会检测到这一变化，并触发相应的更新。对于基本数据类型的 <code>ref</code>，Vue 通过访问器属性（getter 和 setter）来追踪变化。</p></li><li><p><strong>自动解包</strong>：在模板和某些特定的反应式上下文中（比如计算属性或侦听器），Vue 会自动解包 <code>ref</code>，使其可以直接使用而不需要显式地通过 <code>.value</code> 访问。但是，在 JavaScript 代码内部使用时，仍然需要手动访问 <code>.value</code>。</p></li></ul><h5 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h5><ul><li><strong><code>reactive</code></strong> 利用 <code>Proxy</code> 提供深层次的响应式对象，适用于复杂的数据结构。</li><li><strong><code>ref</code></strong> 更加灵活，可以包装任意类型的值，特别是基本数据类型，并且通过访问器属性实现响应性。</li></ul><p>两者都是 Vue 响应式系统的重要组成部分，但根据不同的需求选择合适的工具可以使你的应用更加高效和易于维护。</p>`,19)]))}const g=s(o,[["render",l]]);export{k as __pageData,g as default};
